
Spring bean -> Is a POJO based object in spring terms
Spring Container(IOC Container/ Spring Context) -> Manages Spring beans & their lifecycle,
POJO(Bean) + Configurations => Spring Container - ready container (ready to use beans at runtime)


 2 types of Spring Containers
 1) Bean Factory : Basic Spring container
 2) Application Context : Advance Spring container with enterprise-specific features


 JAVA Bean Vs POJO vs Spring bean

 JAVA Bean
 -----------
 - Java Bean implements Serializable interface
 - Requires no-args constructor
 - Allow access to their properties using getters & setters
 - Similar to POJO based

 POJO : Plain Old Java Object
 - Any Java Object is a POJO

 Spring Bean
-----------
- Any Java Object that is managed by Spring
- Spring uses IOC container ( Bean Factory or Application Context) to manage these objects

Annotations
-----------
@Bean -> defines the bean at method level
@Component -> spring autowires the class instance to directly use
@ComponentScan -> Spring uses these as qualifying package to autowires the class object
@Configuration -> Spring configues all the POJO based things to use.
@Primary -> if there are multiple instances & bean then by adding @Primary tells spring to choose this as primary bean
@Qualifier("name") -> describes the qualifier name, if there are multiple instance of bean you have tell spring to use
this as injection using constructor injection
@Autowired -> Just wire up the class instance in a preferred one !. @Primary one



@Primary Vs @Qualifier
---------------------
Always think from perspective of class to which one is at high priority to use

@Autowired + @Qualifier : Inject/Autowire only the specific classes defined with @Qualifier

@Qualifier > @Primary

